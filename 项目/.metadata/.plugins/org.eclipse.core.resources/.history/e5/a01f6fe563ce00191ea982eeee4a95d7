package com.it666.dao;

import java.net.ConnectException;
import java.sql.SQLException;
import java.util.List;

import javax.sound.midi.Soundbank;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;

import com.it666.domain.Books;
import com.it666.utils.JdbcUtil;
import com.mysql.jdbc.Connection;

public class BooksDao {
	 //1.连接数据库
	private QueryRunner qr = new QueryRunner(JdbcUtil.getDataSource());
	
//	
//	public Connection ConnectException()
//	{
//		final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
//	    final String DB_URL = "jdbc:mysql://localhost:3306/RUNOOB";
//	 
//	    
//	 
//	    // 数据库的用户名与密码，需要根据自己的设置
//	    static final String USER = "root";
//	    static final String PASS = "123456";
//		
//		
//		
//		return null;
//		
//	
//	}
//	
	public List<Books> findAllBooks() {
		       
				//2.从数据库获取数据
				
				//查找全部书
				String sql = "select * from books";
				List<Books> allBooks = null;   //????
				try {
					allBooks = qr.query(sql, new BeanListHandler<Books>(Books.class));
					System.out.println(allBooks);
				} catch (SQLException e) {
					e.printStackTrace();
				}
                //System.out.println(allbooks);
				return allBooks;
	}
	
	//2.添加图书到数据库
		public void addBooks(Books books) throws SQLException {
			/*String sql = "insert into books(isbn,book_name,book_author,book_price,book_nackNo,book_status,book_edition,data_storage,book_gdesc,is_host,cid,image_id) value(?,?,?,?,?,?)";
			qr.update(sql, books.getName(),books.getPrice(),books.getImage(),books.getGdesc(),books.getIs_hot(),books.getCid());
			*/
		}
		//3.根据id从数据库删除图书
		public void delBooks(int id) throws SQLException {
		    String sql = "delete from books where id=?";
		    qr.update(sql,id);
		}
		//4.更新图书
		public void updateBooks(Books books) throws SQLException {
			/*String sql = "update books set name=?,price=?,image=?,gdesc=?,is_host=?,cid=? where id=?";
			qr.update(sql, books.getName(),books.getPrice(),books.getImage(),books.getGdesc(),books.getIs_hot(),books.getCid(),books.getId());
	*/	}
	    //5.根据id查询图书
		public Books getBooksWithId(Integer id) throws Exception{
			System.out.println(id);
			String sql = "select * from books where book_id=?";
			Books books = qr.query(sql, new BeanHandler<Books>(Books.class),id);
			System.out.println(books);
			return books;
		}
		    //6.根据类别查询图书
				public List<Books> getBooksWithCid(Integer  cid) throws Exception{
					
					String sql = "select * from books where cid=?";
					/*System.out.println(sql);
					List<Books> books = (List<Books>) qr.query(sql, new BeanHandler<Books>(Books.class),cid);
					System.out.println(books);*/
					List<Books> books = null;   //????
					try {
						books = qr.query(sql, new BeanListHandler<Books>(Books.class),cid);

					} catch (SQLException e) {
						e.printStackTrace();
					}
	                //System.out.println(allbooks);
					return books;
				}
            //模糊查询书名
				public List<Books> getBooksSearchName(String book_name) {
					// TODO Auto-generated method stub
					//String sql = "SELECT * FROM books  WHERE book_name LIKE '%"+book_name+"%'";
					//☆☆☆注意where 1=1后面一定要留空格，否则和后面进行字符串拼接后，到数据库查询会出现错误
			        String sql = "select * from books where 1=1 ";
			        //创建一个集合用来存储查询的参数，因为我们不清楚客户到底输入几个参数，所以用集合来存放
			        List<String> list = new ArrayList<String>();
			        if (book_name != "") {
			            //如果用户输入的pname不为空，那需要进行字符串拼接
			            sql += "and book_name like ? ";
			            //将用户输入的参数添加到集合
			            list.add("%" + book_name + "%");
			        }
			        //最后将集合转化成数组
			        Object[] params = list.toArray();

					List<Books> books = null;   //????
					try {
						books = qr.query(sql, new BeanListHandler<Books>(Books.class),book_name);
                        System.out.println(books);
					} catch (SQLException e) {
						e.printStackTrace();
					}
					return books;
				}

}
